// Generated by dts-bundle-generator v9.5.1

export type OrderByDirection = "desc" | "asc";
export type WhereFilterOp = "<" | "<=" | "==" | "!=" | ">=" | ">" | "array-contains" | "in" | "not-in" | "array-contains-any";
/**
 * Firebase Admin Configuration interface.
 */
export interface FirebaseAdminConfig {
	/**
	 * The type of the service account.
	 */
	type?: string;
	/**
	 * The project ID associated with the service account.
	 */
	project_id: string;
	/**
	 * The private key ID of the service account.
	 */
	private_key_id?: string;
	/**
	 * The private key of the service account.
	 */
	private_key: string;
	/**
	 * The client email of the service account.
	 */
	client_email: string;
	/**
	 * The client ID of the service account.
	 */
	client_id?: string;
	/**
	 * The authentication URI for the service account.
	 */
	auth_uri?: string;
	/**
	 * The token URI for the service account.
	 */
	token_uri?: string;
	/**
	 * The authentication provider's x509 certificate URL.
	 */
	auth_provider_x509_cert_url?: string;
	/**
	 * The client's x509 certificate URL.
	 */
	client_x509_cert_url?: string;
	/**
	 * The universe domain associated with the service account.
	 */
	universe_domain?: string;
}
export interface InitFirebaseAdminInput {
	serviceAccount?: FirebaseAdminConfig;
	databaseId?: string;
	ignoreUndefinedValues?: boolean;
}
/**
 * Represents a RESTful response object containing a document.
 * @template T - The type of document in the response. Defaults to 'any'.
 * @param exists - The number of documents in the response.
 * @param data - The document data of type T.
 * @param error - Optional. Represents any error information in the response.
 */
export interface Document<T = any> {
	id: string;
	ref: string;
	data: () => T | undefined;
	exists: () => boolean;
}
export interface GetDocumentRes<T = any> extends Document<T> {
	response?: any;
	jsonResponse?: object;
	error?: any;
}
/**
 * Represents a RESTful response object containing documents.
 * @template T - The type of documents in the response. Defaults to 'any'.
 * @param size - The number of documents in the response.
 * @param empty - Indicates whether the response is empty.
 * @param docs - An array of documents of type T.
 * @param error - Optional. Represents any error information in the response.
 */
export interface GetDocumentsRes<T = any> {
	size: number;
	empty: boolean;
	docs: Document<T>[];
	error?: any;
	jsonResponse?: object;
}
export interface toJsonResponse extends GetDocumentsRes {
	docReads?: number;
}
/**
 * Nested class for operations related to documents.
 */
/**
 * Represents a collection operations class for Firestore.
 * Provides methods for querying and manipulating documents in a collection.
 * @template T - The type of the documents in the collection.
 */
export interface CollectionOperationsInstance<T extends object> {
	where(field: string, op: WhereFilterOp, value: any): CollectionOperationsInstance<T>;
	orderBy(field: string, direction: OrderByDirection): CollectionOperationsInstance<T>;
	limit(limit: number): CollectionOperationsInstance<T>;
	delete(): Promise<any>;
	page(page: number): CollectionOperationsInstance<T>;
	tojson(): Promise<toJsonResponse>;
	todocs(data: T[]): Promise<any>;
	get(): Promise<GetDocumentsRes<T>>;
}
/**
 * Nested class for operations related to documents.
 */
export declare class FirestoreOperations {
	databaseId: string;
	constructor(databaseId: string);
	/**
	* Update a document in Firestore.
	* @param {Object} docPath - Additional options for the operation.
	* @template T - The type of the document data.
	* @returns {DocOperations<T>} Document operations instance.
	*/
	doc<T extends object>(docPath: string): DocOperations<T>;
	/**
	* Update a document in Firestore.
	* @param {T} data - The data to set in the document.
	* @param {Object} options - Additional options for the operation.
	* @param {boolean} options.merge - Whether to merge the data with the existing document. Defaults to false.
	* @returns {Promise<CompatibleDocument<T>>} A Promise that resolves to a response object containing fetched Firestore document.
	*/
	collection<T extends object>(collectionPath: string): CollectionOperationsInstance<T>;
}
declare class DocOperations<T extends object> {
	docPath: string;
	databaseId: string;
	constructor(docPath: string, databaseId: string);
	/**
	* Update a document in Firestore.
	* @param {T} data - The data to set in the document.
	* @param {Object} options - Additional options for the operation.
	* @param {boolean} options.merge - Whether to merge the data with the existing document. Defaults to false.
	* @returns {Promise<CompatibleDocument<T>>} A Promise that resolves to a response object containing fetched Firestore document.
	*/
	update(data: T): Promise<GetDocumentRes<T>>;
	/**
	* Set a document in Firestore.
	* @param {T} data - The data to set in the document.
	* @param {Object} options - Additional options for the operation.
	* @param {boolean} options.merge - Whether to merge the data with the existing document. Defaults to false.
	* @returns {Promise<CompatibleDocument<T>>} A Promise that resolves to a response object containing fetched Firestore document.
	*/
	set(data: T, options?: {
		merge: boolean;
	}): Promise<GetDocumentRes<T>>;
	/**
	* Runs a query to get the document.
	* @return {Promise<GetDocumentRes<T>>} A Promise that resolves to a response object containing fetched Firestore document.
	*/
	get(): Promise<GetDocumentRes<T>>;
}
/**
 * Initializes a new instance of the FirebaseAdminRest class.
 * @param {InitFirebaseAdminInput | undefined} initialValue - Optional initial value for the FirebaseAdminConfig.
 */
export declare class RestFirestoreInstance {
	initialValue: InitFirebaseAdminInput | undefined;
	constructor(initialValue?: InitFirebaseAdminInput);
	/**
	 * Initializes the Firebase Rest Admin SDK.
	 * @returns {FirestoreOperations} A new instance of the FirestoreOperations class.
	 */
	firestore(): Promise<FirestoreOperations>;
}
export declare function initFirebaseRest(options?: InitFirebaseAdminInput): RestFirestoreInstance;

export {};
